{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red77\green78\blue84;\red29\green31\blue38;\red203\green194\blue208;
}
{\*\expandedcolortbl;;\cssrgb\c37255\c38039\c40392;\cssrgb\c14902\c16471\c20000;\cssrgb\c83529\c80784\c85098;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // import PlacesAutocomplete, \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   geocodeByAddress,\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   getLangLng,\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // \} from 'react-places-autocomplete';\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // import \{ useState, useEffect \} from 'react';\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // const Maps = () => \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   const [address, setAddress] = useState('');\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   const [name, setName] = useState([]);\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 //   const handleSelect = async (value) => \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //     const results = await value;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //     console.log(results);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //     setAddress(value);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //     setName([...name, results]);\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   \};\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 //   return (\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //     <div>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //       <PlacesAutocomplete\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //         value=\{address\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //         onChange=\{setAddress\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //         onSelect=\{handleSelect\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //       >\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //         \{(\{ getInputProps, suggestions, getSuggestionItemProps, loading \}) => (\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //           <div>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //             <p>Name: \{name\}</p>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //             <input \{...getInputProps(\{ placeholder: 'Type location' \})\}></input>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //             <div>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //               \{loading ? <div>...loading</div> : null\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //               \{suggestions.map((suggestion) => \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                 const style = \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                   backgroundColor: suggestion.active ? '#41b6e6' : '#fff',\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                 \};\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                 return (\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                   <div \{...getSuggestionItemProps(suggestion, \{ style \})\}>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                     \{suggestion.description\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                   </div>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                 );\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //               \})\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //               \{/* \{suggestions.map((suggestion) => \{\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //                 return <div>\{suggestion.description\}</div>;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //               \})\} */\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //             </div>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //           </div>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //         )\}\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //       </PlacesAutocomplete>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //     </div>\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 //   );\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // \};\cf4 \cb1 \strokec4 \
}